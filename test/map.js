import test from 'ava'
import fs from 'fs-extra'

import cli from './helpers/cli.js'
import tmp from './helpers/tmp.js'
import read from './helpers/read.js'

import getMapfile from '../lib/getMapfile'

test('inline maps are generated by default', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output
  ])

  t.falsy(error, stderr)

  t.regex(await read(output), /\/*# sourceMappingURL=/)
})

test('--map generates external sourcemaps', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output,
    '--map'
  ])

  t.falsy(error, stderr)

  t.truthy(await fs.pathExists(output.replace('.css', '.css.map')))
})

test('--no-map disables internal sourcemaps', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output,
    '--no-map'
  ])
  t.falsy(error, stderr)

  t.notRegex(await read(output), /\/*# sourceMappingURL=/)
})

test('mapFile path is property resolved', async t => {
  const paths = [
    {
      input: '/foo/bar.css/baz/index.css',
      want: '/foo/bar.css/baz/index.css.map'
    },
    {
      input: '/foo/bar.sss/baz/index.sss',
      want: '/foo/bar.sss/baz/index.sss.map'
    },
    {
      input: '/foo/bar.css/baz/bar.css',
      want: '/foo/bar.css/baz/bar.css.map'
    }
  ]

  for (const p of paths) {
    t.is(getMapfile(p.input), p.want)
  }
})
