const test = require('ava')
const fs = require('fs-extra')

const cli = require('./helpers/cli.js')
const tmp = require('./helpers/tmp.js')
const read = require('./helpers/read.js')

const getMapfile = require('../lib/getMapfile')

test('inline maps are generated by default', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output
  ])

  t.falsy(error, stderr)

  t.regex(await read(output), /\/*# sourceMappingURL=/)
})

test('--map generates external sourcemaps', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output,
    '--map'
  ])

  t.falsy(error, stderr)

  t.truthy(await fs.pathExists(output.replace('.css', '.css.map')))
})

test('--no-map disables internal sourcemaps', async t => {
  const output = tmp('output.css')

  const { error, stderr } = await cli([
    'test/fixtures/import.css',
    '-u',
    'postcss-import',
    '-o',
    output,
    '--no-map'
  ])
  t.falsy(error, stderr)

  t.notRegex(await read(output), /\/*# sourceMappingURL=/)
})

test('mapFile path is property resolved', async t => {
  const paths = [
    {
      input: { to: '/foo/bar.css/baz/index.css' },
      want: '/foo/bar.css/baz/index.css.map'
    },
    {
      input: { to: '/foo/bar.sss/baz/index.sss' },
      want: '/foo/bar.sss/baz/index.sss.map'
    },
    {
      input: { to: '/foo/bar.css/baz/bar.css' },
      want: '/foo/bar.css/baz/bar.css.map'
    },
    {
      input: { map: { annotation: 'foo.map' }, to: '/foo/bar.css/baz/bar.css' },
      want: '/foo/bar.css/baz/foo.map'
    }
  ]

  for (const p of paths) {
    t.is(getMapfile(p.input), p.want)
  }
})
